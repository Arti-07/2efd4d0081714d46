import asyncio
import json

from src.agent.core.profession_roadmap_agent import ProfessionRoadmapAgent


async def main():
    """Test profession roadmap agent with complete user profile data"""

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
    personality_data = {
        "code": "ENTP-T",
        "personality_type": "–ü–æ–ª–µ–º–∏—Å—Ç (–¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω—ã–π)",
        "description": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º—ã—Å–ª–∏—Ç–µ–ª—å, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—â—É—â–∏–π —É–ª—É—á—à–µ–Ω–∏—è.",
        "full_description": "–¢—É—Ä–±—É–ª–µ–Ω—Ç–Ω—ã–µ –ü–æ–ª–µ–º–∏—Å—Ç—ã —Å–æ—á–µ—Ç–∞—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ —Å –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è. –û–Ω–∏ –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ —Å–ø–æ—Ä–µ –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–∞–∫—Ü–∏—è–º –¥—Ä—É–≥–∏—Ö. –û—Ç–∫—Ä—ã—Ç—ã –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏.",
        "strengths": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –∫—Ä–∏—Ç–∏–∫–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å",
        "weaknesses": "–ú–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã, —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–æ–π, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –Ω–µ—É–¥–∞—á–∞–º",
        "career_advice": "–ü–æ–¥—Ö–æ–¥—è—Ç –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ —Ä–æ–ª–∏, –≥–¥–µ —Ü–µ–Ω–∏—Ç—Å—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≥–∏–±–∫–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–µ–Ω—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤.",
        "careers": ["–ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä", "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–ü—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä", "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"]
    }

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
    astrology_data = {
        "zodiac_sign": "–í–æ–¥–æ–ª–µ–π",
        "element": "–í–æ–∑–¥—É—Ö",
        "quality": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
        "traits": "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π, –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º—ã—Å–ª–∏—Ç–µ–ª—å –∏ —Ä–µ—Ñ–æ—Ä–º–∞—Ç–æ—Ä.",
        "careers": ["–ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–£—á–µ–Ω—ã–π", "–ê–∫—Ç–∏–≤–∏—Å—Ç", "–ê—Å—Ç—Ä–æ–ª–æ–≥"],
        "strengths": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å, –≥—É–º–∞–Ω–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
        "challenges": "–û—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç—å, —É–ø—Ä—è–º—Å—Ç–≤–æ, –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å, —Ö–æ–ª–æ–¥–Ω–æ—Å—Ç—å"
    }

    # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
    profession_title = "Backend Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    agent = ProfessionRoadmapAgent(
        profession_title=profession_title,
        personality_data=personality_data,
        astrology_data=astrology_data,
        current_level=None,  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å "BEGINNER", "JUNIOR", "MIDDLE", "SENIOR", "EXPERT"
        model="Qwen/Qwen3-235B-A22B-Instruct-2507",
        temperature=0.4,
        top_p=0.9,
        max_tokens=16384,
    )

    try:
        result = await agent.generate_roadmap()
        
        print("\n" + "="*80)
        print("–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô CAREER ROADMAP")
        print("="*80)
        
        print(f"\nüìã –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {result.get('profession')}")
        
        # –û–±–∑–æ—Ä
        overview = result.get('overview', {})
        print(f"\nüìñ –û–ë–ó–û–†")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {overview.get('description')}")
        print(f"   –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {overview.get('totalDuration')}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(overview.get('keySkills', []))}")
        
        if overview.get('personalityInsight'):
            print(f"   üí° –õ–∏—á–Ω–æ—Å—Ç—å: {overview.get('personalityInsight')}")
        
        if overview.get('astrologyInsight'):
            print(f"   ‚≠ê –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è: {overview.get('astrologyInsight')}")
        
        # –≠—Ç–∞–ø—ã
        stages = result.get('stages', [])
        print(f"\nüéØ –≠–¢–ê–ü–´ –†–ê–ó–í–ò–¢–ò–Ø ({len(stages)} —ç—Ç–∞–ø–æ–≤)")
        for i, stage in enumerate(stages, 1):
            print(f"\n{'-'*80}")
            print(f"–≠–¢–ê–ü {i}: {stage.get('level')} - {stage.get('title')}")
            print(f"{'-'*80}")
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stage.get('duration')}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {stage.get('description')}")
            
            print(f"\n  üéØ –¶–µ–ª–∏ ({len(stage.get('goals', []))}):")
            for goal in stage.get('goals', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"     ‚Ä¢ {goal}")
            
            print(f"\n  üîß –ù–∞–≤—ã–∫–∏ ({len(stage.get('skills', []))}):")
            for skill in stage.get('skills', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"     ‚Ä¢ {skill.get('name')} ({skill.get('importance')}) - {skill.get('description')}")
            
            print(f"\n  üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ({len(stage.get('tools', []))}):")
            for tool in stage.get('tools', [])[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"     ‚Ä¢ {tool.get('name')} ({tool.get('category')})")
            
            print(f"\n  üí¨ –í–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ ({len(stage.get('interviewQuestions', []))}):")
            for qa in stage.get('interviewQuestions', [])[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"     Q: {qa.get('question')}")
                print(f"     A: {qa.get('answer')[:100]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–∞–π–ª
        with open("roadmap_result.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\n{'='*80}")
        print("‚úÖ –ü–æ–ª–Ω—ã–π roadmap —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: roadmap_result.json")
        print("="*80 + "\n")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
