═══════════════════════════════════════════════════════════════════════════════
    PROFESSION AMBIENTS AGENT - Агент генерации окружений профессии
═══════════════════════════════════════════════════════════════════════════════

ОПИСАНИЕ:
  Агент создает иммерсивные окружения (амбиенты) для выбранной профессии,
  помогая пользователю "почувствовать" профессию через реалистичные сценарии.

═══════════════════════════════════════════════════════════════════════════════

СОЗДАННЫЕ ФАЙЛЫ:

Backend (Python):
  ├── src/agent/core/profession_ambients_agent.py
  │     └─ Основной агент для генерации окружений
  │
  ├── src/agent/prompts/profession_ambients_prompt.txt
  │     └─ Системный промпт для агента
  │
  ├── src/agent/profession_ambients_agent_test.py
  │     └─ Полный тест агента с примером программиста
  │
  ├── src/agent/profession_ambients_simple_example.py
  │     └─ Упрощенный пример использования
  │
  ├── src/models/vibe_model.py
  │     └─ Добавлены Pydantic модели:
  │         - AmbientEnvironment
  │         - ProfessionTools
  │         - QuestionAnswer
  │         - AmbientsGenerateRequest
  │         - AmbientsGenerateResponse
  │
  └── src/routes/vibe_routes.py
        └─ Добавлен API эндпоинт: POST /vibe/ambients

Frontend (TypeScript):
  ├── src/types/vibe.ts
  │     └─ Добавлены TypeScript типы для ambients
  │
  └── src/api/vibe.ts
        └─ Добавлена функция: generateProfessionAmbients()

═══════════════════════════════════════════════════════════════════════════════

СТРУКТУРА ВЫХОДНЫХ ДАННЫХ:

{
  "profession_title": "Название профессии",
  "ambients": [
    {
      "id": "ambient_1",
      "name": "Название окружения",
      "text": "Описание ситуации (обязательно)",
      "image_prompt": "Промпт для картинки на английском (опционально)",
      "sound_prompt": "Промпт для звуков (опционально)",
      "voice": "Текст голоса/фразы (опционально)"
    },
    // ... от 3 до 5 окружений с разными комбинациями полей
  ],
  "tools": {
    "title": "Инструменты профессии",
    "items": [
      "🔧 Инструмент 1 - описание",
      "📱 Инструмент 2 - описание",
      // ... 5-8 инструментов с эмодзи
    ]
  }
}

═══════════════════════════════════════════════════════════════════════════════

ИСПОЛЬЗОВАНИЕ:

Python (прямое использование):
  from src.agent.core.profession_ambients_agent import ProfessionAmbientsAgent
  
  agent = ProfessionAmbientsAgent(
      profession_title="Программист",
      personality_data={...},      # Данные теста 16personalities
      astrology_data={...},        # Астрологические данные
      clarifying_data={...}        # Ответы на уточняющие вопросы
  )
  
  result = await agent.generate_ambients()

API (HTTP запрос):
  POST http://localhost:8000/vibe/ambients
  Headers:
    Authorization: Bearer <token>
    Content-Type: application/json
  Body:
    {
      "profession_title": "Программист",
      "question_answers": [
        {
          "question_id": "q1",
          "question_text": "Какой уровень опыта?",
          "answer": "Middle"
        }
      ]
    }

TypeScript (Frontend):
  import { generateProfessionAmbients } from '@/api/vibe';
  
  const result = await generateProfessionAmbients(
    "Программист",
    [
      {
        question_id: "q1",
        question_text: "Какой уровень опыта?",
        answer: "Middle"
      }
    ]
  );

═══════════════════════════════════════════════════════════════════════════════

ТЕСТИРОВАНИЕ:

Полный тест:
  cd 2efd4d0081714d46
  python -m src.agent.profession_ambients_agent_test

Упрощенный пример:
  cd 2efd4d0081714d46
  python -m src.agent.profession_ambients_simple_example

═══════════════════════════════════════════════════════════════════════════════

ОСОБЕННОСТИ:

✓ Генерирует 3-5 разнообразных окружений
✓ Варьирует комбинации полей (не все поля во всех окружениях)
✓ Учитывает личностные данные и астрологию
✓ Использует уточняющую информацию о профессии
✓ Создает промпты для изображений на английском
✓ Добавляет реалистичные звуковые промпты
✓ Включает типичные фразы/голоса для профессии
✓ Список инструментов с эмодзи и описаниями

═══════════════════════════════════════════════════════════════════════════════

ПРИМЕРЫ ОКРУЖЕНИЙ:

Для программиста:
  - Командное планирование спринта (text + image + sound + voice)
  - Глубокая работа над багом (text + image + sound)
  - Обратная связь от тимлида (text + voice)
  - Взаимодействие с командой (text + sound)
  - Запуск микросервиса (text only)

Для UX/UI дизайнера:
  - Работа над интерфейсом (text + image + sound)
  - Презентация команде (text + image + sound + voice)
  - Обратная связь от пользователя (text + sound + voice)
  - Финал спринта (text + image)
  - Мозговой штурм (text + image + sound)

═══════════════════════════════════════════════════════════════════════════════

ИНТЕГРАЦИЯ В WORKFLOW:

1. Пользователь проходит тест 16personalities
2. Пользователь создает астрологический профиль
3. Агент ProfessionCardsAgent генерирует карточки профессий
4. Пользователь выбирает профессию (или вводит свою)
5. Агент ProfessionValidatorAgent проверяет валидность
6. Агент ProfessionVibeAgent задает уточняющие вопросы
7. Пользователь отвечает на вопросы
8. ►►► Агент ProfessionAmbientsAgent создает окружения ◄◄◄
9. Пользователь погружается в атмосферу профессии

═══════════════════════════════════════════════════════════════════════════════

